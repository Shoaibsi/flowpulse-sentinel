Streaming Market Data (Quotes)
We are pleased to announce that US equity options, CME futures and CME futures options market data is available for streaming once again.
Get an Api Quote Token
DXLink Streamer
DXLink Symbology
DXLink Documentation
Candle Events (Historic Data)
tastytrade supports streaming quote data asynchronously via websocket. We do not currently offer a way to fetch quotes synchronously.

The process to subscribe to streaming market events has two parts.

Get an API quote token.
Using the api quote token, clients may fetch market events from DXLink (see DXLink Streamer section below).
Important: Api quote tokens expire after 24 hours

Get an Api Quote Token
The GET /api-quote-tokens endpoint will return an api quote token and its associated urls.

This token is unique to the Customer identified by the session token on the request. It's used to identify the customer to TW's quote provider, DXLink.

GET
/api-quote-tokens
{
    "data": {
        "token": "<redacted>",
        "dxlink-url": "wss://tasty-openapi-ws.dxfeed.com/realtime",
        "level": "api"
    },
    "context": "/api-quote-tokens"
}
Quote streamer tokens are valid for 24 hours.

Please note that you must be registered as a tastytrade customer if you want to stream quotes. This means going through the account opening process. If you've only registered a username/password, your api qoute token request will be rejected with the following error:

{'error':
  {'code': 'quote_streamer.customer_not_found_error',
  'message': 'You must be a customer to access a quote stream.'}
}
Head to tastytrade.com and click "Open An Account" to open your tastytrade account.

DXLink Streamer
DXLink data is sent and received via a websocket connection. Use the dxlink-url provided to you in the /api-quote-tokens response to open a websocket.

All of the steps below are very well documented on DXLink's protocol documentation site. That same site also lets you use your api quote token to test out the DxLink protocol. We are providing some high level instructions below for convenience.

If you want to test in your browser, there is a chrome extension called Browser Websocket Client that you can install in your Google Chrome browser. We have a configuration file here that you can configure the client with. The file includes all of the example messages below.

It's important to send the messages to DxLink in the proper order. At a high level, the order is as follows:

SETUP
AUTHORIZE
CHANNEL_REQUEST - open a channel
FEED_SETUP - configure the channel
FEED_SUBSCRIPTION - subscribe to market events for one or more symbols
KEEPALIVE
Let's go into a little more detail on these. We'll provide example messages based on what you'll see when using the tastytrade web trading platform.

SETUP

This is the first message you send to initiate a connection to DXLink.

Sent: {"type":"SETUP","channel":0,"version":"0.1-DXF-JS/0.3.0","keepaliveTimeout":60,"acceptKeepaliveTimeout":60}
Received: {"type":"SETUP","channel":0,"keepaliveTimeout":60,"acceptKeepaliveTimeout":60,"version":"1.0-1.2.1-20240722-153442"}
AUTHORIZE

After SETUP, you should receive an AUTH_STATE message with state: UNAUTHORIZED. This is when you'd authorize with your api quote token:

Received: {"type":"AUTH_STATE","channel":0,"state":"UNAUTHORIZED"}
Sent: {"type":"AUTH","channel":0,"token":"<redacted>"}
Received: {"type":"AUTH_STATE","channel":0,"state":"AUTHORIZED","userId":"<redacted>"}
CHANNEL_REQUEST

You can then open up a channel on which to send subscription messages and receive market event data. A channel is a virtual connection that you may use to subscribe to different data. For example, you may want one channel for equities and another for futures. The channel number is any number you want to use to identify that channel.

Sent: {"type":"CHANNEL_REQUEST","channel":3,"service":"FEED","parameters":{"contract":"AUTO"}}
Received: {"type":"CHANNEL_OPENED","channel":3,"service":"FEED","parameters":{"contract":"AUTO","subFormat":"LIST"}}
FEED_SETUP

Once a channel is opened, you should configure what data fields to receive on that channel.

Sent: {"type":"FEED_SETUP","channel":3,"acceptAggregationPeriod":0.1,"acceptDataFormat":"COMPACT","acceptEventFields":{"Trade":["eventType","eventSymbol","price","dayVolume","size"],"TradeETH":["eventType","eventSymbol","price","dayVolume","size"],"Quote":["eventType","eventSymbol","bidPrice","askPrice","bidSize","askSize"],"Greeks":["eventType","eventSymbol","volatility","delta","gamma","theta","rho","vega"],"Profile":["eventType","eventSymbol","description","shortSaleRestriction","tradingStatus","statusReason","haltStartTime","haltEndTime","highLimitPrice","lowLimitPrice","high52WeekPrice","low52WeekPrice"],"Summary":["eventType","eventSymbol","openInterest","dayOpenPrice","dayHighPrice","dayLowPrice","prevDayClosePrice"]}}
Received: {"type":"FEED_CONFIG","channel":3,"dataFormat":"COMPACT","aggregationPeriod":0.1}
You can see from the above FEED_SETUP message that our web platform subscribes to a subset of data for each event type. This lets DxLink know to only send data like eventSymbol, price, dayVolume, and size when sending a Trade event.

FEED_SUBSCRIPTION

At this point you're ready to subscribe to market event data. DxLink will continue to stream these events to you over your channel until you unsubscribe to them. You can subscribe to multiple events for multiple symbols in a single message. We've abridged some of the message for readability.

Sent: {"type":"FEED_SUBSCRIPTION","channel":3,"reset":true,"add":[{"type":"Trade","symbol":"BTC/USD:CXTALP"},{"type":"Quote","symbol":"BTC/USD:CXTALP"},{"type":"Profile","symbol":"BTC/USD:CXTALP"},{"type":"Summary","symbol":"BTC/USD:CXTALP"},{"type":"Trade","symbol":"SPY"},{"type":"TradeETH","symbol":"SPY"},{"type":"Quote","symbol":"SPY"},{"type":"Profile","symbol":"SPY"},{"type":"Summary","symbol":"SPY"}]}
Received: {"type":"FEED_DATA","channel":3,"data":["Trade",["Trade","SPY",559.36,1.3743299E7,100.0,"Trade","BTC/USD:CXTALP",58356.71,"NaN","NaN"]]}
To stop receiving data for a symbol, you'd send another FEED_SUBSCRIPTION message with "remove" for each event type:

{"type":"FEED_SUBSCRIPTION","channel":3,"remove":[{"type":"Trade","symbol":"SPY"},{"type":"Quote","symbol":"SPY"},{"type":"Summary","symbol":"SPY"}]}
KEEPALIVE

You need to send a keepalive message at regular intervals to keep the websocket connection open. If DxLink doesn't receive a keepalive within the 60-second timeout, it will close the connection. Sending a keepalive message to them every 30 seconds will keep the connection alive indefinitely.

{"type":"KEEPALIVE","channel":0}
DxLink Market Data Events

DXLink provides several different market events, each of which has its own schema. For example, the Quote event provides data like bidPrice and askPrice while the Profile event provides data like high52WeekPrice and description. DXLink requires that you specify which market events you wish to subscribe to when you are adding a symbol subscription.

tastytrade's api quote token grants you access to the following market data events:

Profile
Quote
Summary
Trade
Greeks
For an overview of each of those events and the data they provice, head to DxLink's protocol docs which contains the schema for each event. For example, you can search the page for ProfileEvent or QuoteEvent and find all the data that comes in each of those events.

Symbology
To receive live market event data via DXLink, clients must convert symbols into a format that meets DxLink's requirements. For convenience, we provide these symbols via a field called streamer-symbol. You can find it in the http response body when fetching instrument data. For example, for subscribing to market events for a futures contract, you would hit the GET /instruments/futures endpoint:

GET
/instruments/futures
{
    "data": {
        "items": [
            {
                "symbol": "/6AM3",
                "streamer-exchange-code": "XCME",
                "streamer-symbol": "/6AM23:XCME"
            }
        ]
    }
}
An identical field is available for the following instruments endpoints:

GET /instruments/cryptocurrencies
GET /instruments/equities/:symbol
GET /instruments/futures
GET /futures-option-chains/:product-code
GET /option-chains/:underlying-symbol
DXLink Documentation
DXLink protocol documentation can be found here.

When setting up a feed with DxLink, be sure to use the COMPACT data format, as the FULL format uses a lot of data and will be turned off in the future. For example:

{
  "type": "FEED_SETUP",
  "channel": 1,
  "acceptAggregationPeriod": 10,
  "acceptDataFormat": "COMPACT",
  "acceptEventFields": {
    "Quote": ["eventType", "eventSymbol", "bidPrice", "askPrice", "bidSize", "askSize"]
  }
}
DXLink has an interactive debug console here. Use your api quote token to authenticate.

For convenience, DxFeed provides a number of SDKs for communicating with DxLink over websockets:

.NET API

Swift API

C/C++ API

Java API

JS API

Candle Events (Historic Data)
DxLink allows you to subscribe to different event types. One of these event types is Candle. A candle event represents quote data for a duration of time like 5 minutes, 1 hour, or 1 day. Each event has fields like open, close, high, and low.

When you subscribe to candle events for a specific symbol, you need to provide a period and a type. The type represents the unit of time with which each candle is measured, like minutes or hours. The period is a multiplier for the type, like five minutes or two hours.

You need both period and type to be present in the symbol when subscribing to candle events.

Please refer to DxFeed's guidelines for more information on how to generate a candle symbol correctly.

The final piece you need in order to subscribe to candle events is a fromTime timestamp. This is an integer in Unix epoch time format. For example, the timestamp representing August 8th, 2023 at 10:00am GMT is 1691402400. If today were August 9th, 2023 at 10:00am GMT and you used 1691402400 as the fromTime, you'd receive 24 hours of candle events.

Here are a few examples:

Suppose you wanted AAPL quote data from the past 24 hours and you wanted it grouped into 5-minute intervals. The fromTime would be now - 24 hours in epoch format. The symbol would look like AAPL{=5m} where 5 is the period and m is the type (minutes). Each candle event you receive will represent 5 minutes of data. The open field represents the price of AAPL at the start of the 5-minute candle duration and close represents the price of AAPL at the end of the 5-minute candle duration. high is the highest price that AAPL hit during those 5 minutes, and low is the lowest price that AAPL hit during those 5 minutes.

Suppose you wanted SPY quote data for the past 6 months grouped into 1-hour intervals. The symbol would look like SPY{=1h} and the fromTime would just be now - 6 months in epoch format.

Important We recommend using larger time intervals the further back you go. If you request too many candles you could get blasted with millions of events and bring your client to a crawl. For example, requesting 12 months of data grouped into 1-minute intervals would amount to around half a million events. That is a lot of data to process all at once.

Here is a rough guideline on what type and period to use based on how far back you reach:

Time Back	Recommended Type	Example	Notes
1 day	1 Minute	AAPL{=1m}	Returns around 1440 candle events
1 week	5 Minutes	AAPL{=5m}	Returns around 2016 candle events
1 month	30 Minutes	AAPL{=30m}	Returns around 1440 candle events
3 months	1 hour	AAPL{=1h}	Returns around 2160 candle events
6 months	2 hours	AAPL{=2h}	Returns around 2160 candle events
1 year+	1 day	AAPL{=1d}	Returns around 365 candle events
The last candle event you receive is always the "live" candle data. You may receive this event constantly as the quote changes and the candle data is updated for the current period. Specifically, the close value will update as the quote's price changes. For example, say you subscribed to AAPL{=5m} and it is currently 12:51. The "live" candle event should have a timestamp of 12:50. You should constantly receive messages for this event as the quote moves. Once the clock hits 12:55, the 12:50 event will close and the "live" event will be 12:55. This allows you to fetch whatever historica data you want and also be notified of the most recent quote statistics as they change.

Streaming Account Data
Getting Started
Available Actions
Receiving Notifications
Notification Nuances
Hosts
Demo
The tastytrade API utilizes a websocket for publishing one-directional notifications from the API layer to trading client applications. We refer to this one-directional websocket as our "Account Streamer".

In general, we publish Account Streamer notifications about state changes to existing account data such as orders, balances, and positions. We also send notifications about state changes to non-account data such as public watchlists and quote alert triggers.

This allows clients to subscribe to real-time updates rather than polling API endpoints.

As an example, suppose you submit an opening order to buy 100 shares of AAPL. The HTTP response would look like this:

POST
/accounts/{account_number}/orders
{
    "data": {
        "order": {
            "id": 1,
            "account-number": "5WT00000",
            "time-in-force": "Day",
            "order-type": "Market",
            "size": 100,
            "underlying-symbol": "AAPL",
            "underlying-instrument-type": "Equity",
            "status": "Routed",
            "cancellable": true,
            "editable": true,
            "edited": false,
            "legs": [
                {
                    "instrument-type": "Equity",
                    "symbol": "AAPL",
                    "quantity": 100,
                    "remaining-quantity": 100,
                    "action": "Buy to Open",
                    "fills": []
                }
            ]
        }
    },
    "context": "/accounts/5WT00000/orders"
}
You'll notice the status is Routed, which means our system is in the process of sending your order to the exchange (for more info on order statuses and their many meanings, see the Order Flow page). Since this is a market order, it probably filled immediately. Let's re-fetch this order via the /GET /accounts/{account_number}/orders/{id} endpoint to verify:

GET
/accounts/{account_number}/orders/{id}
{
    "data": {
        "id": 1,
        "account-number": "5WT00000",
        "time-in-force": "Day",
        "order-type": "Market",
        "size": 100,
        "underlying-symbol": "AAPL",
        "underlying-instrument-type": "Equity",
        "status": "Filled",
        "cancellable": false,
        "editable": false,
        "edited": false,
        "ext-exchange-order-number": "12345",
        "ext-client-order-id": "67890",
        "ext-global-order-number": 1111,
        "received-at": "2023-07-05T19:07:32.444+00:00",
        "updated-at": 1688584052750,
        "in-flight-at": "2023-07-05T19:07:32.494+00:00",
        "live-at": "2023-07-05T19:07:32.495+00:00",
        "destination-venue": "TEST_A",
        "user-id": 99,
        "username": "coolperson",
        "terminal-at": "2023-07-05T19:07:32.737+00:00",
        "legs": [
            {
                "instrument-type": "Equity",
                "symbol": "AAPL",
                "quantity": 100,
                "remaining-quantity": 0,
                "action": "Buy to Open",
                "fills": [
                    {
                        "ext-group-fill-id": "0",
                        "ext-exec-id": "1122",
                        "fill-id": "24_TW::TEST_A47504::20230705.1179-TEST_FILL",
                        "quantity": 100,
                        "fill-price": "100.0",
                        "filled-at": "2023-07-05T19:07:32.496+00:00",
                        "destination-venue": "TEST_A"
                    }
                ]
            }
        ]
    },
    "context": "/accounts/5WT00000/orders/1"
}
The order is filled! But we had to make an additional HTTP request to fetch the order to check. What if you had an order that hadn't filled yet but instead was Live for a few minutes? Would you need to continuously be making requests to get its status? That seems like a pain! To alleviate this pain, you should utilize the account streamer.

The account streamer publishes real-time messages every time the order's status changes. All you need to do is open a websocket to the correct url (see hosts below) and subscribe to all account updates. As the order's status changes, you'll receive messages via the websocket that look like this:

Order Notification
{
  type: 'Order',
  data: {
    "id": 1,
    "account-number": "5WT00000",
    "time-in-force": "Day",
    "order-type": "Market",
    "size": 100,
    "underlying-symbol": "AAPL",
    "underlying-instrument-type": "Equity",
    "status": "Live",
    "cancellable": true,
    "editable": true,
    "edited": false,
    "legs": [
        {
            "instrument-type": "Equity",
            "symbol": "AAPL",
            "quantity": 100,
            "remaining-quantity": 100,
            "action": "Buy to Open",
            "fills": []
        }
    ]
  },
  timestamp: 1688595114405
}
Now you don't need to worry about polling or re-fetching your order!

Getting Started
At a high level, the following steps must be performed in order:

Open a websocket connection to the back-end host
Subscribe to notifications
Send heartbeats to back-end host
Note: If you don't perform these actions in the order listed above, you may get a not implemented error when attempting to subscribe to notifications. Please ensure you begin sending heartbeats after you have successfully sent a connect message.

1. Open a Websocket Connection
Open a websocket connection using your langauge of choice. For example, if you are running in a NodeJs environment, you could use the ws package:

Javascript Example
const WebSocket = require('ws')

const host = 'wss://streamer.cert.tastyworks.com'
const websocket = new WebSocket(host)
websocket.addEventListener('open', () => {
  // Schedule your heartbeat
})
websocket.addEventListener('message', (messageEvent) => {
  // Parse the message
})
You need to send an auth-token with every request made to the websocket server. This is your tastytrade session-token string from the POST /sessions response. It's the same value you provide in the Authorization header of all other API requests.

2. Subscribe to Notifications
There are several different types of notifications you can subscribe to. We refer to these types as "actions". You can think of it as subscribing to notifications regarding any actions that occur, such as quote changes, balance changes, watchlist updates, etc. For a complete list of the various actions, see Available Actions below.

Each subscribe message should contain an action, value, and auth-token key, like this:

Subscribe Message Schema
{
  "action": "<action>", // one of the available actions below
  "value": "<string>", // Optional. Depends on the message action being sent (see available actions below)
  "auth-token": "<string>" // `session-token` value from session creation response
}
Most of the time you'll want to send a connect message, which subscribes you to account updates for whichever account numbers you provide:

Sample Connect Message
{
  "action": "connect",
  "value": ["5WT00000","5WT00001"],
  "auth-token": "your session token here",
  "request-id": 2
}
Connect Response Message
{
  "status": "ok",
  "action": "connect",
  "web-socket-session-id": "5b6e2799",
  "value": [ "5WT00000", "5WT00001" ],
  "request-id": 2
}
3. Send heartbeats
Once an active streamer connection has been established, you need to send heartbeat messages to the tastytrade server periodically (15s - 1m interval). This ensures that your websocket remains connected and also lets you detect streamer connection drops.

Sample Heartbeat Json
{
  "action": "heartbeat",
  "auth-token": "your session token here",
  "request-id": 1
}
The request-id isn't required, but our servers will include it in their response messages.

Heartbeat Response Message
{
  "status": "ok",
  "action": "heartbeat",
  "web-socket-session-id": "5b6e2799",
  "request-id": 1
}
Available Actions
heartbeat

Sent periodically to the streamer server to prevent the socket connection from being considered "stale"
When sending this message, value is blank
Heartbeat messages should be sent at regular intervals (15s-1m)
connect

Subscribes to all account-related notifications (orders, account balances, positions)
public-watchlists-subscribe

Although this subscribes to public watchlist updates, an auth token is still required
When sending this message, value is blank
quote-alerts-subscribe

Subscribes to quote alert messages about alerts the user has previously configured via a POST request to the /quote-alerts endpoint
When sending this message, value is blank
Important note: quote alerts exist at a user level, and not an account level
user-message-subscribe

Subscribes to user-level messages like new account created.
When sending this message, value is the user's external-id returned in the POST /sessions response.
Receiving Notifications
All messages which are published via the streamer use the same json object representations as elsewhere in the API. Streamer messages always contain a full object representation, not a partial or a differential update.

Each message will have a type key that corresponds to the class of data being provided. For example, a notification with type: Order will have a full order json message in the data key:

Order Notification
{
  type: 'Order',
  data: {
    "id": 1,
    "account-number": "5WT00000",
    "time-in-force": "Day",
    "order-type": "Market",
    "size": 100,
    "underlying-symbol": "AAPL",
    "underlying-instrument-type": "Equity",
    "status": "Live",
    "cancellable": true,
    "editable": true,
    "edited": false,
    "legs": [
        {
            "instrument-type": "Equity",
            "symbol": "AAPL",
            "quantity": 100,
            "remaining-quantity": 100,
            "action": "Buy to Open",
            "fills": []
        }
    ]
  },
  timestamp: 1688595114405
}
Notification Nuances
Order Filled notifications
tastytrade marks an order Filled as soon as possible and sends fill data through the Account Streamer. Here’s how it works:

tastytrade gets fill data from the exchange for each leg of the order.
The order is marked Filled when there is no remaining quantity left to fill*.
tastytrade publishes fill data over the account streamer for each filled leg.
*For multi-leg option orders, which must be executed simultaneously, tastytrade marks the order Filled when the first leg is processed, assuming that leg has no remaining quantity. The first account streamer message will show the order as Filled with just one leg of fill data. The other fills will be processed and published over the account streamer immediately after. The final message will include all fill data for all legs.

We do this because order legs are often filled multiple times. For example, if you route an order to buy 100 shares of AAPL, you could receive 100 separate fills for 1 share each. We publish each of these fills as a separate message as they are processed.

Hosts
Sandbox : wss://streamer.cert.tastyworks.com

Production: wss://streamer.tastyworks.com

Demo
We have a demo page where you can subscribe to your sandbox account data. Head here to try it out.

Tastytrade Api Documentation
To start, update the Sessions/Login request with your username and password. The Login request stores your tastytrade session token in an environment variable called tt_auth_token. This auth token is automatically added to the Authorization header of all other requests in this collection.

Some requests require an account number that you can add in the params section of each request. Look for the "Path Variables" section and edit the value.

Sessions


POST
Login
{{base_url}}/sessions
Update the "login" field with your username or email. Then update the "password" field. Once you submit this request, the auth token is stored in an environment variable called tt_auth_token. This auth token is automatically added to the Authorization header of all other requests in this collection.

Body
raw (json)
json
{
	"login": "myusername",
	"password": "mypassword",
    "remember-me": true
}
POST
Login with Remember Token
{{base_url}}/sessions


Request Headers
Content-Type
application/json
Body
raw (json)
json
{
	"login": "myusername",
	"remember-token": "myremembertoken",
    "remember-me": true
}
Balances and Positions


GET
Account Balance
{{base_url}}/accounts/:account_number/balances


Path Variables
account_number
GET
Balance Snapshots
{{base_url}}/accounts/:account_number/balance-snapshots


Path Variables
account_number
GET
Positions
{{base_url}}/accounts/:account_number/positions


Path Variables
account_number
Accounts and Customers


GET
Customer
{{base_url}}/customers/me


GET
Customer Accounts
{{base_url}}/customers/me/accounts


GET
Customer Account
{{base_url}}/customers/me/accounts/:account_number


Path Variables
account_number
Instruments


GET
Cryptocurrencies
{{base_url}}/instruments/cryptocurrencies


GET
Cryptocurrency by Symbol
{{base_url}}/instruments/cryptocurrencies/:symbol


Path Variables
symbol
BTC/USD
GET
Active Equities
{{base_url}}/instruments/equities/active


GET
Equities
{{base_url}}/instruments/equities?symbol=AAPL


Query Params
symbol
AAPL
GET
Equity by Symbol
{{base_url}}/instruments/equities/:symbol


Path Variables
symbol
AAPL
GET
Equity Options
{{base_url}}/instruments/equity-options


GET
Equity Option by Symbol
{{base_url}}/instruments/equity-options/:symbol


Path Variables
symbol
GET
Futures
{{base_url}}/instruments/futures


GET
Future by Symbol
{{base_url}}/instruments/futures/:symbol


Path Variables
symbol
GET
Future Option Products
{{base_url}}/instruments/future-option-products


GET
Future Option Product
{{base_url}}/instruments/future-option-products/:exchange/:root_symbol


Path Variables
exchange
CME
root_symbol
ES
GET
Future Products
{{base_url}}/instruments/future-products


GET
Future Product
{{base_url}}/instruments/future-products/:exchange/:code


Path Variables
exchange
CME
code
ES
GET
Quantity Decimal Precisions
{{base_url}}/instruments/quantity-decimal-precisions


GET
Warrants
{{base_url}}/instruments/warrants


GET
Warrant by Symbol
{{base_url}}/instruments/warrants/:symbol


Path Variables
symbol
GET
Future Option Chains by Symbol
{{base_url}}/futures-option-chains/:symbol


Path Variables
symbol
ES
GET
Future Option Chains Nested by Symbol
{{base_url}}/futures-option-chains/:symbol/nested


Path Variables
symbol
CL
GET
Option Chains by Symbol
{{base_url}}/option-chains/:symbol


Path Variables
symbol
AAPL
GET
Option Chains Nested by Symbol
{{base_url}}/option-chains/:symbol/nested


Path Variables
symbol
AAPL
GET
Option Chains Compact by Symbol
{{base_url}}/option-chains/:symbol/compact


Path Variables
symbol
AAPL
Orders


POST
Order Dry Run
{{base_url}}/accounts/:account_number/orders/dry-run


Path Variables
account_number
Body
raw (json)
View More
json
{
  "order-type": "Limit",
  "price": 1.0,
  "price-effect": "Debit",
  "time-in-force": "Day",
  "legs": [
    {
      "instrument-type": "Equity",
      "action": "Buy to Open",
      "quantity": 100,
      "symbol": "AAPL"
    }
  ]
}
POST
Equity Order
{{base_url}}/accounts/:account_number/orders


Path Variables
account_number
Body
raw (json)
View More
json
{
  "order-type": "Limit",
  "price": 1.0,
  "price-effect": "Debit",
  "time-in-force": "Day",
  "legs": [
    {
      "instrument-type": "Equity",
      "action": "Buy to Open",
      "quantity": 100,
      "symbol": "AAPL"
    }
  ]
}
GET
Live Orders
{{base_url}}/accounts/:account_number/orders/live
Returns all orders relevant to today. This includes any orders that were cancelled today.

Path Variables
account_number
GET
All Orders
{{base_url}}/accounts/:account_number/orders


Path Variables
account_number
GET
Order by Id
{{base_url}}/accounts/:account_number/orders/:order_id


Path Variables
account_number
order_id
DELETE
Cancel Order
{{base_url}}/accounts/:account_number/orders/:order_id


Path Variables
account_number
order_id
PUT
Replace Order
{{base_url}}/accounts/:account_number/orders/:order_id


Path Variables
account_number
order_id
Body
raw (json)
View More
json
{
  "order-type": "Limit",
  "price": 1.0,
  "price-effect": "Debit",
  "time-in-force": "Day",
  "legs": [
    {
      "instrument-type": "Equity",
      "action": "Buy to Open",
      "quantity": 100,
      "symbol": "AAPL"
    }
  ]
}
PATCH
Edit Order
{{base_url}}/accounts/:account_number/orders/:order_id


Path Variables
account_number
order_id
Body
raw (json)
json
{
  "order-type": "Limit",
  "price": 2.0,
  "price-effect": "Debit",
  "time-in-force": "Day"
}
POST
Edit Order Dry Run
{{base_url}}/accounts/:account_number/orders/:order_id/dry-run


Path Variables
account_number
order_id
Body
raw (json)
json
{
  "order-type": "Limit",
  "price": 2.0,
  "price-effect": "Debit",
  "time-in-force": "Day"
}
Symbol Search


GET
Search for symbol
{{base_url}}/symbols/search/:symbol


Path Variables
symbol
AA
Transactions


GET
Account Transactions
{{base_url}}/accounts/:account_number/transactions


Path Variables
account_number
GET
Account Transaction by Id
{{base_url}}/accounts/:account_number/transactions/:id


Path Variables
account_number
id
GET
Total Transaction Fees
{{base_url}}/accounts/:account_number/transactions/total-fees


Path Variables
account_number
Net Liq History


GET
Net Liquidating Value History
{{base_url}}/accounts/:account_number/net-liq/history


Path Variables
account_number
Market Metrics


GET
Volatility Data
{{base_url}}/market-metrics?symbols=AAPL,FB


Query Params
symbols
AAPL,FB
GET
Dividend History
{{base_url}}/market-metrics/historic-corporate-events/dividends/:symbol


Path Variables
symbol
T
GET
Earnings Report History
{{base_url}}/market-metrics/historic-corporate-events/earnings-reports/:symbol


Path Variables
symbol
T